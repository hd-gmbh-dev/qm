
[workspace]
resolver = "2"
members = [
  "crates/*",
  "examples/*",
]

[workspace.package]
edition = "2021"
version = "0.0.29"
rust-version = "1.75.0"
authors = ["Jürgen Seitz <juergen.seitz@h-d-gmbh.de>"]
license = "MIT"
repository = "https://github.com/hd-gmbh-dev/quick-microservice-rs"

[workspace.dependencies]
anyhow = "1.0.79"
async-trait = "0.1.77"
axum = "0.7.4"
tynm = "0.1.8"
base64 = "0.22.0"
constcat = "0.5.0"
chrono = { version="0.4.31", features = ["serde"] }
futures = "0.3.30"
tokio = { version = "1.40.0", features = ["full"] }
tower-http = { version = "0.5.0", features = ["cors"] }
thiserror = "1.0.56"
itertools = "0.13.0"
envy = "0.4.2"
reqwest = { version = "0.12.7", default-features = false, features = ["json"] }
jsonwebtoken = "9.2.0"
serde = { version = "1.0.208", features = ["derive", "rc"] }
serde_json = "1.0.128"
keycloak = "25.0.200"
mongodb = "3.1.0"
lazy_static = "1.4.0"
tracing = "0.1.40"
strum = { version = "0.26", features = ["derive"] }
redis = { version = "0.26.1", features = ["tokio-comp"] }
deadpool-redis = "0.16.0"
uuid = { version = "1.6.1", features = ["v4", "v7"]}
glob = "0.3.1"
async-graphql-axum = "7.0.1"
sqlx = { version = "0.8", features = ["runtime-tokio", "postgres", "uuid", "time"]}
time = { version = "0.3.14", features = ["formatting", "parsing", "macros", "serde"] }
Inflector = "0.11.4"
async-graphql = { version = "7.0.1", features = [
    "bson",
    "chrono",
    "chrono-tz",
    "uuid",
    "graphiql",
    "time"
] }
prometheus-client = "0.22.1"
rdkafka = { version = "0.36.2" }

hex = "0.4.3"
serde_with = "3.7.0"
sea-orm = { version = "1.1.0-rc.1", default-features = false, features = [ "sqlx-postgres" ] }

qm-entity = { path = "crates/entity", version = "0.0.29" }
qm-entity-derive = { path = "crates/entity-derive", version = "0.0.29" }
qm-customer = { path = "crates/customer", version = "0.0.29" }
qm-server = { path = "crates/server", version = "0.0.29" }
qm-mongodb = { path = "crates/mongodb", version = "0.0.29" }
qm-pg = { path = "crates/pg", version = "0.0.29" }
qm-redis = { path = "crates/redis", version = "0.0.29" }
qm-s3 = { path = "crates/s3", version = "0.0.29" }
qm-kafka = { path = "crates/kafka", version = "0.0.29" }
qm-keycloak = { path = "crates/keycloak", version = "0.0.29" }
qm-role = { path = "crates/role", version = "0.0.29" }
qm-role-build = { path = "crates/role-build", version = "0.0.29" }
qm-utils = { path = "crates/utils", version = "0.0.29" }
qm-utils-derive = { path = "crates/utils-derive", version = "0.0.29" }
qm = { path = ".", default-features = false, version = "0.0.29" }


[package]
name = "qm"
description = "Utilities for quick microservices in Rust"
edition = "2021"
rust-version = "1.75.0"
version.workspace = true
authors = ["Jürgen Seitz <juergen.seitz@h-d-gmbh.de>"]
license = "MIT"
repository = "https://github.com/hd-gmbh-dev/quick-microservice-rs"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
qm-entity = { workspace = true, optional = true }
qm-customer = { workspace = true, optional = true }
qm-server = { workspace = true, optional = true }
qm-mongodb = { workspace = true, optional = true }
qm-redis = { workspace = true, optional = true }
qm-pg = { workspace = true, optional = true }
qm-s3 = { workspace = true, optional = true }
qm-kafka = { workspace = true, optional = true }
qm-keycloak = { workspace = true, optional = true }
qm-role = { workspace = true, optional = true }
qm-role-build = { workspace = true, optional = true }
qm-utils = { workspace = true, optional = true }

[features]
default = [
  # "entity",
  # "customer",
  # "server",
  # "mongodb",
  # "redis",
  # "pg",
  # "s3",
  # "kafka",
  # "keycloak",
  # "role",
  # "role-build",
  # "utils",
]
entity = ["qm-entity"]
customer = ["qm-customer"]
server = ["qm-server"]
mongodb = ["qm-mongodb"]
redis = ["qm-redis"]
pg = ["qm-pg"]
s3 = ["qm-s3"]
kafka = ["qm-kafka"]
keycloak = ["qm-keycloak"]
role = ["qm-role"]
role-build = ["qm-role-build"]
utils = ["qm-utils"]
